// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                          String           @id @default(cuid())
  name                        String
  email                       String           @unique
  password                    String
  role                        Role             @default(USER) // Default role is USER
  isVerified                  Boolean          @default(false)
  verificationToken           String?
  verificationTokenExpiresAt  DateTime?
  passwordResetToken          String?
  passwordResetTokenExpiresAt DateTime?
  // Add relations
  // For example, if a user can have multiple products, media, and orders
  product                     Product[]
  media                       Media[]
  orders                      Order[]
  shippingAddress             ShippingAddress?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  isPublished Boolean    @default(false)
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  media       Media[]
  cartItems   CartItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([categoryId]) // For faster category lookups
  @@index([name]) // For product searches
  @@index([userId]) // Add index for user lookups
}

model Media {
  id           String   @id @default(cuid())
  url          String
  isDefault    Boolean  @default(false) // Main product image
  product      Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId    String?
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  uploadedById String?
  // type      MediaType // Use enum for media types
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id                String          @id @default(cuid())
  status            OrderStatus     @default(PENDING)
  totalAmount       Float?
  shippingAddressId String
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  paymentStatus     PaymentStatus   @default(PENDING)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  cartItems         CartItem[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId]) // For faster user lookups
}

model CartItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id         String   @id @default(cuid())
  address    String
  state      String
  postalCode String
  country    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// enum MediaType {
//   IMAGE
//   VIDEO
// }
